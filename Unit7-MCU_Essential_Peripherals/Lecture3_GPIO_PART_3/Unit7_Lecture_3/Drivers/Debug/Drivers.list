
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000554  0800055c  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000554  08000554  0001055c  2**0
                  CONTENTS
  4 .ARM          00000000  08000554  08000554  0001055c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000554  0800055c  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000554  08000554  00010554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800055c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800055c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001921  00000000  00000000  00010585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000042d  00000000  00000000  00011ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  000122d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000127e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b05  00000000  00000000  00012878  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000ccb  00000000  00000000  0001437d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000773a  00000000  00000000  00015048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c782  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800053c 	.word	0x0800053c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800053c 	.word	0x0800053c

08000170 <Clock_Init>:

#include "Stm32_F103C6_GPIO_Driver.h"
#include "stm32f103x6.h"

void Clock_Init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/* Enable GPIO PORTA Clock*/
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <Clock_Init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <Clock_Init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	/* Enable GPIO PORTB Clock*/
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <Clock_Init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <Clock_Init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_Init>:

void GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig;

	/* PORTA Pin 1 Floating Input: CNF1(01: Floating input) / MODE1(00: Input mode (reset state) (0100 IN CRL1)*/
	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinConfig);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <GPIO_Init+0x64>)
 80001ac:	f000 f8fa 	bl	80003a4 <MCAL_GPIO_Init>

	/*PORTA Pin 13 Floating Input: CNF13(01: Floating input) / MODE13(00: Input mode (reset state) (0100 IN CRH13)*/
	PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b4:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinConfig);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <GPIO_Init+0x64>)
 80001c0:	f000 f8f0 	bl	80003a4 <MCAL_GPIO_Init>


									/* === GPIO PORTB Config.=== */

	/* PORTB pin 1 PUSH-PULL OUTPUT: CNF1(00: General purpose output push-pull) / MODE1(01: Output mode, max speed 10 MHz.)(0001 in CRL1)*/
	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80001c4:	2302      	movs	r3, #2
 80001c6:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <GPIO_Init+0x68>)
 80001d6:	f000 f8e5 	bl	80003a4 <MCAL_GPIO_Init>

	/* PORTB pin 13 PUSH-PULL OUTPUT: CNF1(00: General purpose output push-pull) / MODE1(01: Output mode, max speed 10 MHz.)(0001 in CRL1)*/
	PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <GPIO_Init+0x68>)
 80001ee:	f000 f8d9 	bl	80003a4 <MCAL_GPIO_Init>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <wait_ms>:

void wait_ms(uint32_t time)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < time; i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <wait_ms+0x14>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	429a      	cmp	r2, r3
 800021e:	d3f8      	bcc.n	8000212 <wait_ms+0xe>
}
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
	...

0800022c <main>:

int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	/* Clock Init. */
	Clock_Init();
 8000230:	f7ff ff9e 	bl	8000170 <Clock_Init>

	/* GPIO Init. */
	GPIO_Init();
 8000234:	f7ff ffb0 	bl	8000198 <GPIO_Init>

	while(1)
	{
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_Reset)
 8000238:	2102      	movs	r1, #2
 800023a:	4812      	ldr	r0, [pc, #72]	; (8000284 <main+0x58>)
 800023c:	f000 f931 	bl	80004a2 <MCAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d10b      	bne.n	800025e <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000246:	2102      	movs	r1, #2
 8000248:	480f      	ldr	r0, [pc, #60]	; (8000288 <main+0x5c>)
 800024a:	f000 f941 	bl	80004d0 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_Reset);
 800024e:	bf00      	nop
 8000250:	2102      	movs	r1, #2
 8000252:	480c      	ldr	r0, [pc, #48]	; (8000284 <main+0x58>)
 8000254:	f000 f925 	bl	80004a2 <MCAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f8      	beq.n	8000250 <main+0x24>
		}

		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_Set)
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4808      	ldr	r0, [pc, #32]	; (8000284 <main+0x58>)
 8000264:	f000 f91d 	bl	80004a2 <MCAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d104      	bne.n	8000278 <main+0x4c>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <main+0x5c>)
 8000274:	f000 f92c 	bl	80004d0 <MCAL_GPIO_TogglePin>
		}
		wait_ms(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f7ff ffc2 	bl	8000204 <wait_ms>
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_Reset)
 8000280:	e7da      	b.n	8000238 <main+0xc>
 8000282:	bf00      	nop
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f91b 	bl	80004f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffb5 	bl	800022c <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	0800055c 	.word	0x0800055c
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC1_2_IRQHandler>

080002de <Get_Pin_Location>:
 * @retval		- Location of selected pin in which configuration bits start
 * Note			- None
 *****************************************************************************************
 */
uint8_t Get_Pin_Location(uint16_t PinNumber)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	4603      	mov	r3, r0
 80002e6:	80fb      	strh	r3, [r7, #6]

	switch (PinNumber) {
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	2b80      	cmp	r3, #128	; 0x80
 80002ec:	d042      	beq.n	8000374 <Get_Pin_Location+0x96>
 80002ee:	2b80      	cmp	r3, #128	; 0x80
 80002f0:	dc11      	bgt.n	8000316 <Get_Pin_Location+0x38>
 80002f2:	2b08      	cmp	r3, #8
 80002f4:	d036      	beq.n	8000364 <Get_Pin_Location+0x86>
 80002f6:	2b08      	cmp	r3, #8
 80002f8:	dc06      	bgt.n	8000308 <Get_Pin_Location+0x2a>
 80002fa:	2b02      	cmp	r3, #2
 80002fc:	d02e      	beq.n	800035c <Get_Pin_Location+0x7e>
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d02e      	beq.n	8000360 <Get_Pin_Location+0x82>
 8000302:	2b01      	cmp	r3, #1
 8000304:	d028      	beq.n	8000358 <Get_Pin_Location+0x7a>
 8000306:	e047      	b.n	8000398 <Get_Pin_Location+0xba>
 8000308:	2b20      	cmp	r3, #32
 800030a:	d02f      	beq.n	800036c <Get_Pin_Location+0x8e>
 800030c:	2b40      	cmp	r3, #64	; 0x40
 800030e:	d02f      	beq.n	8000370 <Get_Pin_Location+0x92>
 8000310:	2b10      	cmp	r3, #16
 8000312:	d029      	beq.n	8000368 <Get_Pin_Location+0x8a>
 8000314:	e040      	b.n	8000398 <Get_Pin_Location+0xba>
 8000316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800031a:	d033      	beq.n	8000384 <Get_Pin_Location+0xa6>
 800031c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000320:	dc09      	bgt.n	8000336 <Get_Pin_Location+0x58>
 8000322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000326:	d029      	beq.n	800037c <Get_Pin_Location+0x9e>
 8000328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800032c:	d028      	beq.n	8000380 <Get_Pin_Location+0xa2>
 800032e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000332:	d021      	beq.n	8000378 <Get_Pin_Location+0x9a>
 8000334:	e030      	b.n	8000398 <Get_Pin_Location+0xba>
 8000336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800033a:	d027      	beq.n	800038c <Get_Pin_Location+0xae>
 800033c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000340:	dc03      	bgt.n	800034a <Get_Pin_Location+0x6c>
 8000342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000346:	d01f      	beq.n	8000388 <Get_Pin_Location+0xaa>
 8000348:	e026      	b.n	8000398 <Get_Pin_Location+0xba>
 800034a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800034e:	d01f      	beq.n	8000390 <Get_Pin_Location+0xb2>
 8000350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000354:	d01e      	beq.n	8000394 <Get_Pin_Location+0xb6>
 8000356:	e01f      	b.n	8000398 <Get_Pin_Location+0xba>
		case GPIO_PIN_0:
			return 0;
 8000358:	2300      	movs	r3, #0
 800035a:	e01e      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_1:
			return 4;
 800035c:	2304      	movs	r3, #4
 800035e:	e01c      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_2:
			return 8;
 8000360:	2308      	movs	r3, #8
 8000362:	e01a      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_3:
			return 12;
 8000364:	230c      	movs	r3, #12
 8000366:	e018      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_4:
			return 16;
 8000368:	2310      	movs	r3, #16
 800036a:	e016      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_5:
			return 20;
 800036c:	2314      	movs	r3, #20
 800036e:	e014      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_6:
			return 24;
 8000370:	2318      	movs	r3, #24
 8000372:	e012      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_7:
			return 28;
 8000374:	231c      	movs	r3, #28
 8000376:	e010      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_8:
			return 0;
 8000378:	2300      	movs	r3, #0
 800037a:	e00e      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_9:
			return 4;
 800037c:	2304      	movs	r3, #4
 800037e:	e00c      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_10:
			return 8;
 8000380:	2308      	movs	r3, #8
 8000382:	e00a      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_11:
			return 12;
 8000384:	230c      	movs	r3, #12
 8000386:	e008      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_12:
			return 16;
 8000388:	2310      	movs	r3, #16
 800038a:	e006      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_13:
			return 20;
 800038c:	2314      	movs	r3, #20
 800038e:	e004      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_14:
			return 24;
 8000390:	2318      	movs	r3, #24
 8000392:	e002      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_15:
			return 28;
 8000394:	231c      	movs	r3, #28
 8000396:	e000      	b.n	800039a <Get_Pin_Location+0xbc>
			break;
	}
	return 1;
 8000398:	2301      	movs	r3, #1
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <MCAL_GPIO_Init>:
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				  But LQFP48 Package Has Only A,B, Part Of C,D Exported As External Pins
 *****************************************************************************************
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	/*First we should select Port Configuration Register to be configured
	  GPIOx->CRL for Pins from 0 To 7 *** GPIOx_CRH for pins From 8 to 15 */
	volatile uint32_t *ConfigRegister = NULL;													// Pointer to hold register address
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Configuration = 0;																// Variable to hold pin 4 bit configuration
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;		// Assign Register Address Based on Pin Number
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	d801      	bhi.n	80003c2 <MCAL_GPIO_Init+0x1e>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	e001      	b.n	80003c6 <MCAL_GPIO_Init+0x22>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3304      	adds	r3, #4
 80003c6:	60bb      	str	r3, [r7, #8]

	/*Clear Selected Pin Bits CNFx[1:0]  MODEx[1:0]*/
	*ConfigRegister &= ~(0xF << Get_Pin_Location(PinConfig->GPIO_PinNumber));
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff86 	bl	80002de <Get_Pin_Location>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	230f      	movs	r3, #15
 80003d8:	4093      	lsls	r3, r2
 80003da:	43da      	mvns	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	401a      	ands	r2, r3
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	601a      	str	r2, [r3, #0]

	/*Now we select configuration register and Clear it, then we need to check required mode to set configuration register*/
	/* First Check if GPIO is Output Mode */
	if ((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) ||
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d00b      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d007      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_OD))
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	789b      	ldrb	r3, [r3, #2]
	if ((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) ||
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d003      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_OD))
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	2b07      	cmp	r3, #7
 8000404:	d10e      	bne.n	8000424 <MCAL_GPIO_Init+0x80>
	{
		/*if the Mode is output we need to configure   CNFx[1:0]  MODEx[1:0]
		  CNFx = GPIO_MODE_Define  ***  MODEx = GPIO_SPEED_Define */
		Pin_Configuration = ((((PinConfig->GPIO_Mode - 4) << 2) | PinConfig->GPIO_Output_Speed) & 0x0F);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	789b      	ldrb	r3, [r3, #2]
 800040a:	3b04      	subs	r3, #4
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	b25a      	sxtb	r2, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	78db      	ldrb	r3, [r3, #3]
 8000414:	b25b      	sxtb	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b25b      	sxtb	r3, r3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	f003 030f 	and.w	r3, r3, #15
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e02c      	b.n	800047e <MCAL_GPIO_Init+0xda>
	}
	/*if Mode is not Output Then Mode will be Input so we need to check which Input mode was selected */
	else
	{
		if ((PinConfig->GPIO_Mode == GPIO_MODE_Analog) || (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d003      	beq.n	8000434 <MCAL_GPIO_Init+0x90>
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	789b      	ldrb	r3, [r3, #2]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d107      	bne.n	8000444 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNFx[1:0] MODEx[1:0]00
			Pin_Configuration = ((((PinConfig->GPIO_Mode) << 2) | 0x0) & 0x0F);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	789b      	ldrb	r3, [r3, #2]
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f003 030f 	and.w	r3, r3, #15
 8000440:	73fb      	strb	r3, [r7, #15]
 8000442:	e01c      	b.n	800047e <MCAL_GPIO_Init+0xda>
		}
		else
		{
			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d102      	bne.n	8000452 <MCAL_GPIO_Init+0xae>
			{
				// Set CNFx[1:0]01 MODEx[1:0]00
				Pin_Configuration = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0F);
 800044c:	2304      	movs	r3, #4
 800044e:	73fb      	strb	r3, [r7, #15]
 8000450:	e015      	b.n	800047e <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// Set CNFx[1:0]10 MODEx[1:0]00
				Pin_Configuration = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000452:	2308      	movs	r3, #8
 8000454:	73fb      	strb	r3, [r7, #15]

				if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	789b      	ldrb	r3, [r3, #2]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d107      	bne.n	800046e <MCAL_GPIO_Init+0xca>
				{
					// PxODR Pin Bit = 1 for Input Pull-Up, Refer to Table 20: Port bit configuration table.
					GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	8812      	ldrh	r2, [r2, #0]
 8000466:	431a      	orrs	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	e007      	b.n	800047e <MCAL_GPIO_Init+0xda>
				}
				else
				{
					// PxODR Pin Bit = 0 for Input Pull-Down, Refer to Table 20: Port bit configuration table.
					GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	8812      	ldrh	r2, [r2, #0]
 8000476:	43d2      	mvns	r2, r2
 8000478:	401a      	ands	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	60da      	str	r2, [r3, #12]
				}
			}
		}
	}
	// Set Pin configuration into Selected Configuration Register at Selected Pin Location
	*ConfigRegister |= Pin_Configuration << Get_Pin_Location(PinConfig->GPIO_PinNumber);
 800047e:	7bfc      	ldrb	r4, [r7, #15]
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff2a 	bl	80002de <Get_Pin_Location>
 800048a:	4603      	mov	r3, r0
 800048c:	fa04 f203 	lsl.w	r2, r4, r3
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <MCAL_GPIO_ReadPin>:
 * @retval		- Input Pin Value (Two Values Based On @ref GPIO_PIN_State)
 * Note			- None
 *****************************************************************************************
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	460b      	mov	r3, r1
 80004ac:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if (GPIOx->IDR & PinNumber)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	887b      	ldrh	r3, [r7, #2]
 80004b4:	4013      	ands	r3, r2
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_Set;
 80004ba:	2301      	movs	r3, #1
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e001      	b.n	80004c4 <MCAL_GPIO_ReadPin+0x22>
	} else
	{
		bitStatus = GPIO_PIN_Reset;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <MCAL_GPIO_TogglePin>:
 * @retval		- None
 * Note			- None
 *****************************************************************************************
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= PinNumber;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68da      	ldr	r2, [r3, #12]
 80004e0:	887b      	ldrh	r3, [r7, #2]
 80004e2:	405a      	eors	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60da      	str	r2, [r3, #12]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
	...

080004f4 <__libc_init_array>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	2500      	movs	r5, #0
 80004f8:	4e0c      	ldr	r6, [pc, #48]	; (800052c <__libc_init_array+0x38>)
 80004fa:	4c0d      	ldr	r4, [pc, #52]	; (8000530 <__libc_init_array+0x3c>)
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	42a5      	cmp	r5, r4
 8000502:	d109      	bne.n	8000518 <__libc_init_array+0x24>
 8000504:	f000 f81a 	bl	800053c <_init>
 8000508:	2500      	movs	r5, #0
 800050a:	4e0a      	ldr	r6, [pc, #40]	; (8000534 <__libc_init_array+0x40>)
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <__libc_init_array+0x44>)
 800050e:	1ba4      	subs	r4, r4, r6
 8000510:	10a4      	asrs	r4, r4, #2
 8000512:	42a5      	cmp	r5, r4
 8000514:	d105      	bne.n	8000522 <__libc_init_array+0x2e>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800051c:	4798      	blx	r3
 800051e:	3501      	adds	r5, #1
 8000520:	e7ee      	b.n	8000500 <__libc_init_array+0xc>
 8000522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000526:	4798      	blx	r3
 8000528:	3501      	adds	r5, #1
 800052a:	e7f2      	b.n	8000512 <__libc_init_array+0x1e>
 800052c:	08000554 	.word	0x08000554
 8000530:	08000554 	.word	0x08000554
 8000534:	08000554 	.word	0x08000554
 8000538:	08000558 	.word	0x08000558

0800053c <_init>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr

08000548 <_fini>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr
