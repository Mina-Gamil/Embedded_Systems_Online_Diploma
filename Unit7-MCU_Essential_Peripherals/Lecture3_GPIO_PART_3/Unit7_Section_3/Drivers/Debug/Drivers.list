
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d60  08000d60  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d60  08000d60  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d60  08000d60  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000020  08000d88  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000d88  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b82  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009bf  00000000  00000000  00023bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000948  00000000  00000000  0002458a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00024ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00025080  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002104  00000000  00000000  000251d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000021a8  00000000  00000000  000272d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007d21  00000000  00000000  0002947c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003119d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f8  00000000  00000000  00031218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d08 	.word	0x08000d08

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000d08 	.word	0x08000d08

08000170 <delay_ms>:

uint16_t Keypad_Rows[] = {R0, R1, R2, R3};
uint16_t Keypad_Colomn[] = {C0, C1, C2, C3};

static void delay_ms(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <HAL_Keypad_Init>:

void HAL_Keypad_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig;

	PinConfig.GPIO_PinNumber = R0;
 80001ae:	2301      	movs	r3, #1
 80001b0:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001b2:	2304      	movs	r3, #4
 80001b4:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	4826      	ldr	r0, [pc, #152]	; (8000258 <HAL_Keypad_Init+0xb0>)
 80001c0:	f000 fcc2 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R1;
 80001c4:	2302      	movs	r3, #2
 80001c6:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4820      	ldr	r0, [pc, #128]	; (8000258 <HAL_Keypad_Init+0xb0>)
 80001d6:	f000 fcb7 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R2;
 80001da:	2308      	movs	r3, #8
 80001dc:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2304      	movs	r3, #4
 80001e0:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e2:	2301      	movs	r3, #1
 80001e4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	481b      	ldr	r0, [pc, #108]	; (8000258 <HAL_Keypad_Init+0xb0>)
 80001ec:	f000 fcac 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = R3;
 80001f0:	2310      	movs	r3, #16
 80001f2:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2304      	movs	r3, #4
 80001f6:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f8:	2301      	movs	r3, #1
 80001fa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4815      	ldr	r0, [pc, #84]	; (8000258 <HAL_Keypad_Init+0xb0>)
 8000202:	f000 fca1 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C0;
 8000206:	2320      	movs	r3, #32
 8000208:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800020a:	2301      	movs	r3, #1
 800020c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4619      	mov	r1, r3
 8000212:	4811      	ldr	r0, [pc, #68]	; (8000258 <HAL_Keypad_Init+0xb0>)
 8000214:	f000 fc98 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C1;
 8000218:	2340      	movs	r3, #64	; 0x40
 800021a:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800021c:	2301      	movs	r3, #1
 800021e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <HAL_Keypad_Init+0xb0>)
 8000226:	f000 fc8f 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C2;
 800022a:	2380      	movs	r3, #128	; 0x80
 800022c:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800022e:	2301      	movs	r3, #1
 8000230:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4808      	ldr	r0, [pc, #32]	; (8000258 <HAL_Keypad_Init+0xb0>)
 8000238:	f000 fc86 	bl	8000b48 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = C3;
 800023c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000240:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000242:	2301      	movs	r3, #1
 8000244:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(Keypad_Port, &PinConfig);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4619      	mov	r1, r3
 800024a:	4803      	ldr	r0, [pc, #12]	; (8000258 <HAL_Keypad_Init+0xb0>)
 800024c:	f000 fc7c 	bl	8000b48 <MCAL_GPIO_Init>

}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010c00 	.word	0x40010c00

0800025c <HAL_Keypad_Getkey>:


char HAL_Keypad_Getkey(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++)
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e055      	b.n	8000314 <HAL_Keypad_Getkey+0xb8>
	{
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Rows[0], GPIO_PIN_Set);
 8000268:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <HAL_Keypad_Getkey+0xc8>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2201      	movs	r2, #1
 800026e:	4619      	mov	r1, r3
 8000270:	482d      	ldr	r0, [pc, #180]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 8000272:	f000 fcff 	bl	8000c74 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Rows[1], GPIO_PIN_Set);
 8000276:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <HAL_Keypad_Getkey+0xc8>)
 8000278:	885b      	ldrh	r3, [r3, #2]
 800027a:	2201      	movs	r2, #1
 800027c:	4619      	mov	r1, r3
 800027e:	482a      	ldr	r0, [pc, #168]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 8000280:	f000 fcf8 	bl	8000c74 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Rows[2], GPIO_PIN_Set);
 8000284:	4b27      	ldr	r3, [pc, #156]	; (8000324 <HAL_Keypad_Getkey+0xc8>)
 8000286:	889b      	ldrh	r3, [r3, #4]
 8000288:	2201      	movs	r2, #1
 800028a:	4619      	mov	r1, r3
 800028c:	4826      	ldr	r0, [pc, #152]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 800028e:	f000 fcf1 	bl	8000c74 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Rows[3], GPIO_PIN_Set);
 8000292:	4b24      	ldr	r3, [pc, #144]	; (8000324 <HAL_Keypad_Getkey+0xc8>)
 8000294:	88db      	ldrh	r3, [r3, #6]
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	4823      	ldr	r0, [pc, #140]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 800029c:	f000 fcea 	bl	8000c74 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Rows[i], GPIO_PIN_Reset);
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <HAL_Keypad_Getkey+0xc8>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a8:	2200      	movs	r2, #0
 80002aa:	4619      	mov	r1, r3
 80002ac:	481e      	ldr	r0, [pc, #120]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 80002ae:	f000 fce1 	bl	8000c74 <MCAL_GPIO_WritePin>

		for (j = 0; j < 4; j++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
 80002b6:	e024      	b.n	8000302 <HAL_Keypad_Getkey+0xa6>
		{
			if (MCAL_GPIO_ReadPin(Keypad_Port, Keypad_Colomn[j]) == 0)
 80002b8:	4a1c      	ldr	r2, [pc, #112]	; (800032c <HAL_Keypad_Getkey+0xd0>)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c0:	4619      	mov	r1, r3
 80002c2:	4819      	ldr	r0, [pc, #100]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 80002c4:	f000 fcbf 	bl	8000c46 <MCAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d113      	bne.n	80002f6 <HAL_Keypad_Getkey+0x9a>
			{
				while(MCAL_GPIO_ReadPin(Keypad_Port, Keypad_Colomn[j]) == 0);
 80002ce:	bf00      	nop
 80002d0:	4a16      	ldr	r2, [pc, #88]	; (800032c <HAL_Keypad_Getkey+0xd0>)
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d8:	4619      	mov	r1, r3
 80002da:	4813      	ldr	r0, [pc, #76]	; (8000328 <HAL_Keypad_Getkey+0xcc>)
 80002dc:	f000 fcb3 	bl	8000c46 <MCAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f4      	beq.n	80002d0 <HAL_Keypad_Getkey+0x74>
				return Keypad_Keys[i][j];
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <HAL_Keypad_Getkey+0xd4>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	441a      	add	r2, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	e012      	b.n	800031c <HAL_Keypad_Getkey+0xc0>
			}
			delay_ms(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f7ff ff3a 	bl	8000170 <delay_ms>
		for (j = 0; j < 4; j++)
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	3301      	adds	r3, #1
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	2b03      	cmp	r3, #3
 8000306:	ddd7      	ble.n	80002b8 <HAL_Keypad_Getkey+0x5c>
		}
		delay_ms(1);
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff31 	bl	8000170 <delay_ms>
	for (i = 0; i < 4; i++)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3301      	adds	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b03      	cmp	r3, #3
 8000318:	dda6      	ble.n	8000268 <HAL_Keypad_Getkey+0xc>
	}
	return 'A';
 800031a:	2341      	movs	r3, #65	; 0x41
}
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000010 	.word	0x20000010
 8000328:	40010c00 	.word	0x40010c00
 800032c:	20000018 	.word	0x20000018
 8000330:	20000000 	.word	0x20000000

08000334 <delay_ms>:

volatile unsigned char Display_Feature = 0;
GPIO_PinConfig_t PinConfig;							// Declare variable to store Pin Data

static void delay_ms(uint32_t time)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e00b      	b.n	800035a <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	e002      	b.n	800034e <delay_ms+0x1a>
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3301      	adds	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2bfe      	cmp	r3, #254	; 0xfe
 8000352:	d9f9      	bls.n	8000348 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3301      	adds	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	429a      	cmp	r2, r3
 8000360:	d3ef      	bcc.n	8000342 <delay_ms+0xe>
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <HAL_LCD_Port_GPIO>:

void HAL_LCD_Port_GPIO(uint8_t Direction)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	if (Direction)
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d068      	beq.n	800044e <HAL_LCD_Port_GPIO+0xe2>
	{
		// Config. & Init Pins from 0 to 7 to output push pull with speed 10Mhz.
#ifdef Eight_Bit_Mode
		//GPIO Pin 0
		PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800037c:	4b5e      	ldr	r3, [pc, #376]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800037e:	2201      	movs	r2, #1
 8000380:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	4b5d      	ldr	r3, [pc, #372]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000384:	2204      	movs	r2, #4
 8000386:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000388:	4b5b      	ldr	r3, [pc, #364]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800038a:	2201      	movs	r2, #1
 800038c:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 800038e:	495a      	ldr	r1, [pc, #360]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000390:	485a      	ldr	r0, [pc, #360]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 8000392:	f000 fbd9 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 1
		PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000396:	4b58      	ldr	r3, [pc, #352]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000398:	2202      	movs	r2, #2
 800039a:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	4b56      	ldr	r3, [pc, #344]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800039e:	2204      	movs	r2, #4
 80003a0:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003a2:	4b55      	ldr	r3, [pc, #340]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80003a8:	4953      	ldr	r1, [pc, #332]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003aa:	4854      	ldr	r0, [pc, #336]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80003ac:	f000 fbcc 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 2
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80003b0:	4b51      	ldr	r3, [pc, #324]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	4b50      	ldr	r3, [pc, #320]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003bc:	4b4e      	ldr	r3, [pc, #312]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80003c2:	494d      	ldr	r1, [pc, #308]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003c4:	484d      	ldr	r0, [pc, #308]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80003c6:	f000 fbbf 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 3
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80003ca:	4b4b      	ldr	r3, [pc, #300]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003cc:	2208      	movs	r2, #8
 80003ce:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	4b49      	ldr	r3, [pc, #292]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003d2:	2204      	movs	r2, #4
 80003d4:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003d6:	4b48      	ldr	r3, [pc, #288]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003d8:	2201      	movs	r2, #1
 80003da:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80003dc:	4946      	ldr	r1, [pc, #280]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003de:	4847      	ldr	r0, [pc, #284]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80003e0:	f000 fbb2 	bl	8000b48 <MCAL_GPIO_Init>
#endif

		//GPIO Pin 4
		PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80003e4:	4b44      	ldr	r3, [pc, #272]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003e6:	2210      	movs	r2, #16
 80003e8:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	4b43      	ldr	r3, [pc, #268]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003ec:	2204      	movs	r2, #4
 80003ee:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003f0:	4b41      	ldr	r3, [pc, #260]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80003f6:	4940      	ldr	r1, [pc, #256]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80003f8:	4840      	ldr	r0, [pc, #256]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80003fa:	f000 fba5 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 5
		PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80003fe:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000400:	2220      	movs	r2, #32
 8000402:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	4b3c      	ldr	r3, [pc, #240]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000406:	2204      	movs	r2, #4
 8000408:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800040a:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800040c:	2201      	movs	r2, #1
 800040e:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 8000410:	4939      	ldr	r1, [pc, #228]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000412:	483a      	ldr	r0, [pc, #232]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 8000414:	f000 fb98 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 6
		PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000418:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800041a:	2240      	movs	r2, #64	; 0x40
 800041c:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000420:	2204      	movs	r2, #4
 8000422:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000424:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000426:	2201      	movs	r2, #1
 8000428:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 800042a:	4933      	ldr	r1, [pc, #204]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800042c:	4833      	ldr	r0, [pc, #204]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 800042e:	f000 fb8b 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 7
		PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000432:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800043a:	2204      	movs	r2, #4
 800043c:	709a      	strb	r2, [r3, #2]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800043e:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000440:	2201      	movs	r2, #1
 8000442:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 8000444:	492c      	ldr	r1, [pc, #176]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000446:	482d      	ldr	r0, [pc, #180]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 8000448:	f000 fb7e 	bl	8000b48 <MCAL_GPIO_Init>
		//GPIO Pin 7
		PinConfig.GPIO_PinNumber = GPIO_PIN_7;
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
	}
}
 800044c:	e04f      	b.n	80004ee <HAL_LCD_Port_GPIO+0x182>
		PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800044e:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000450:	2201      	movs	r2, #1
 8000452:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000456:	2201      	movs	r2, #1
 8000458:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 800045a:	4927      	ldr	r1, [pc, #156]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800045c:	4827      	ldr	r0, [pc, #156]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 800045e:	f000 fb73 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000464:	2202      	movs	r2, #2
 8000466:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000468:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800046a:	2201      	movs	r2, #1
 800046c:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 800046e:	4922      	ldr	r1, [pc, #136]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000470:	4822      	ldr	r0, [pc, #136]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 8000472:	f000 fb69 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000476:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000478:	2204      	movs	r2, #4
 800047a:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800047e:	2201      	movs	r2, #1
 8000480:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 8000482:	491d      	ldr	r1, [pc, #116]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000484:	481d      	ldr	r0, [pc, #116]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 8000486:	f000 fb5f 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 800048c:	2208      	movs	r2, #8
 800048e:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000492:	2201      	movs	r2, #1
 8000494:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 8000496:	4918      	ldr	r1, [pc, #96]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 8000498:	4818      	ldr	r0, [pc, #96]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 800049a:	f000 fb55 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80004aa:	4913      	ldr	r1, [pc, #76]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004ac:	4813      	ldr	r0, [pc, #76]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80004ae:	f000 fb4b 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004b4:	2220      	movs	r2, #32
 80004b6:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80004be:	490e      	ldr	r1, [pc, #56]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80004c2:	f000 fb41 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004c8:	2240      	movs	r2, #64	; 0x40
 80004ca:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004d4:	4809      	ldr	r0, [pc, #36]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80004d6:	f000 fb37 	bl	8000b48 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_Port, &PinConfig);
 80004e6:	4904      	ldr	r1, [pc, #16]	; (80004f8 <HAL_LCD_Port_GPIO+0x18c>)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <HAL_LCD_Port_GPIO+0x190>)
 80004ea:	f000 fb2d 	bl	8000b48 <MCAL_GPIO_Init>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000040 	.word	0x20000040
 80004fc:	40010800 	.word	0x40010800

08000500 <HAL_LCD_Init>:

void HAL_LCD_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	delay_ms(20);
 8000504:	2014      	movs	r0, #20
 8000506:	f7ff ff15 	bl	8000334 <delay_ms>

	// Register Select Pin Config
	PinConfig.GPIO_PinNumber = RS_Switch;
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <HAL_LCD_Init+0xb0>)
 800050c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000510:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000514:	2204      	movs	r2, #4
 8000516:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000518:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <HAL_LCD_Init+0xb0>)
 800051a:	2201      	movs	r2, #1
 800051c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinConfig);
 800051e:	4924      	ldr	r1, [pc, #144]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000520:	4824      	ldr	r0, [pc, #144]	; (80005b4 <HAL_LCD_Init+0xb4>)
 8000522:	f000 fb11 	bl	8000b48 <MCAL_GPIO_Init>

	// Read/Write Pin Config
	PinConfig.GPIO_PinNumber = RW_Switch;
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000530:	2204      	movs	r2, #4
 8000532:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000536:	2201      	movs	r2, #1
 8000538:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinConfig);
 800053a:	491d      	ldr	r1, [pc, #116]	; (80005b0 <HAL_LCD_Init+0xb0>)
 800053c:	481d      	ldr	r0, [pc, #116]	; (80005b4 <HAL_LCD_Init+0xb4>)
 800053e:	f000 fb03 	bl	8000b48 <MCAL_GPIO_Init>

	// Enable Pin Config
	PinConfig.GPIO_PinNumber = EN_Switch;
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000548:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <HAL_LCD_Init+0xb0>)
 800054c:	2204      	movs	r2, #4
 800054e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000552:	2201      	movs	r2, #1
 8000554:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinConfig);
 8000556:	4916      	ldr	r1, [pc, #88]	; (80005b0 <HAL_LCD_Init+0xb0>)
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <HAL_LCD_Init+0xb4>)
 800055a:	f000 faf5 	bl	8000b48 <MCAL_GPIO_Init>

	// Reset RS_Switch, RW_Switch & EN_Switch.
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_PIN_Reset);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	4813      	ldr	r0, [pc, #76]	; (80005b4 <HAL_LCD_Init+0xb4>)
 8000566:	f000 fb85 	bl	8000c74 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Reset);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	4810      	ldr	r0, [pc, #64]	; (80005b4 <HAL_LCD_Init+0xb4>)
 8000572:	f000 fb7f 	bl	8000c74 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_PIN_Reset);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <HAL_LCD_Init+0xb4>)
 800057e:	f000 fb79 	bl	8000c74 <MCAL_GPIO_WritePin>

	HAL_LCD_Port_GPIO(Output);														//Config. & Init. RS_Switch, RW_Switch & EN_Switch to Output push pull with speed 10Mhz.
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff fef2 	bl	800036c <HAL_LCD_Port_GPIO>
	delay_ms(15);
 8000588:	200f      	movs	r0, #15
 800058a:	f7ff fed3 	bl	8000334 <delay_ms>

#ifdef Eight_Bit_Mode
	HAL_LCD_Send_Command(LCD_FunctionSet | LCD_8bit_Mode | LCD_2Line);
 800058e:	2038      	movs	r0, #56	; 0x38
 8000590:	f000 f880 	bl	8000694 <HAL_LCD_Send_Command>
#ifdef Four_Bit_Mode
	HAL_LCD_Send_Command(LCD_ReturnHome);
	HAL_LCD_Send_Command(LCD_FunctionSet | LCD_4bit_Mode | LCD_2Line);
#endif

	HAL_LCD_Clear_Display();
 8000594:	f000 f877 	bl	8000686 <HAL_LCD_Clear_Display>
	HAL_LCD_Send_Command(LCD_EntryModeSet | LCD_Left_Dec);
 8000598:	2006      	movs	r0, #6
 800059a:	f000 f87b 	bl	8000694 <HAL_LCD_Send_Command>
	HAL_LCD_Display_On();
 800059e:	f000 f91d 	bl	80007dc <HAL_LCD_Display_On>
	HAL_LCD_Blink_On();
 80005a2:	f000 f8eb 	bl	800077c <HAL_LCD_Blink_On>
	HAL_LCD_Cursor_On();
 80005a6:	f000 f901 	bl	80007ac <HAL_LCD_Cursor_On>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000040 	.word	0x20000040
 80005b4:	40010800 	.word	0x40010800

080005b8 <HAL_LCD_Kick>:


void HAL_LCD_Kick(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_PIN_Set);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <HAL_LCD_Kick+0x28>)
 80005c4:	f000 fb56 	bl	8000c74 <MCAL_GPIO_WritePin>
	delay_ms(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f7ff feb3 	bl	8000334 <delay_ms>
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_PIN_Reset);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <HAL_LCD_Kick+0x28>)
 80005d6:	f000 fb4d 	bl	8000c74 <MCAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800

080005e4 <HAL_LCD_Is_Busy>:


void HAL_LCD_Is_Busy(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_LCD_Port_GPIO(Input);													// Config. & Init Pins from 0 to 7 to Floating Input.
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff febf 	bl	800036c <HAL_LCD_Port_GPIO>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Set);						// Set RW_Switch
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <HAL_LCD_Is_Busy+0x4c>)
 80005f6:	f000 fb3d 	bl	8000c74 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_PIN_Reset);					// Reset RS_Switch
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_LCD_Is_Busy+0x4c>)
 8000602:	f000 fb37 	bl	8000c74 <MCAL_GPIO_WritePin>
	while(MCAL_GPIO_ReadPin(LCD_Port, GPIO_PIN_7))								// Check Busy Flag
 8000606:	e001      	b.n	800060c <HAL_LCD_Is_Busy+0x28>
		HAL_LCD_Kick();															// LCD toggle enable
 8000608:	f7ff ffd6 	bl	80005b8 <HAL_LCD_Kick>
	while(MCAL_GPIO_ReadPin(LCD_Port, GPIO_PIN_7))								// Check Busy Flag
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <HAL_LCD_Is_Busy+0x4c>)
 8000610:	f000 fb19 	bl	8000c46 <MCAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f6      	bne.n	8000608 <HAL_LCD_Is_Busy+0x24>
	HAL_LCD_Port_GPIO(Output);													// Config. & Init. RS_Switch, RW_Switch & EN_Switch to Output push pull with speed 10Mhz.
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fea6 	bl	800036c <HAL_LCD_Port_GPIO>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Reset);					// Read/Write Pin Reset
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	4802      	ldr	r0, [pc, #8]	; (8000630 <HAL_LCD_Is_Busy+0x4c>)
 8000628:	f000 fb24 	bl	8000c74 <MCAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010800 	.word	0x40010800

08000634 <HAL_LCD_GoTo_XY>:

void HAL_LCD_GoTo_XY(int Line, int Position)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	if (Line == 1 && Position >= 0 && Position < 16)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10c      	bne.n	800065e <HAL_LCD_GoTo_XY+0x2a>
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db09      	blt.n	800065e <HAL_LCD_GoTo_XY+0x2a>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	dc06      	bgt.n	800065e <HAL_LCD_GoTo_XY+0x2a>
	{
		HAL_LCD_Send_Command((LCD_DDRAM_Address | LCD_1st_Line) + Position);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	3b80      	subs	r3, #128	; 0x80
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f81b 	bl	8000694 <HAL_LCD_Send_Command>
	}
	if (Line == 2 && Position >= 0 && Position < 16)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d10c      	bne.n	800067e <HAL_LCD_GoTo_XY+0x4a>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db09      	blt.n	800067e <HAL_LCD_GoTo_XY+0x4a>
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	dc06      	bgt.n	800067e <HAL_LCD_GoTo_XY+0x4a>
	{
		HAL_LCD_Send_Command((LCD_DDRAM_Address | LCD_2nd_Line) + Position);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	3b40      	subs	r3, #64	; 0x40
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f80b 	bl	8000694 <HAL_LCD_Send_Command>
	}
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_LCD_Clear_Display>:

void HAL_LCD_Clear_Display(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_ClearDisplay);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f802 	bl	8000694 <HAL_LCD_Send_Command>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <HAL_LCD_Send_Command>:

void HAL_LCD_Send_Command(unsigned char Command)
{	
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
#ifdef Eight_Bit_Mode

	HAL_LCD_Is_Busy();
 800069e:	f7ff ffa1 	bl	80005e4 <HAL_LCD_Is_Busy>
	MCAL_GPIO_WritePort(LCD_Port, Command);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <HAL_LCD_Send_Command+0x44>)
 80006aa:	f000 fafa 	bl	8000ca2 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Reset);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <HAL_LCD_Send_Command+0x44>)
 80006b6:	f000 fadd 	bl	8000c74 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_PIN_Reset);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_LCD_Send_Command+0x44>)
 80006c2:	f000 fad7 	bl	8000c74 <MCAL_GPIO_WritePin>
	delay_ms(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fe34 	bl	8000334 <delay_ms>
	HAL_LCD_Kick();
 80006cc:	f7ff ff74 	bl	80005b8 <HAL_LCD_Kick>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Reset);
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_PIN_Reset);
	HAL_LCD_Kick();

#endif
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40010800 	.word	0x40010800

080006dc <HAL_LCD_Write_Character>:

void HAL_LCD_Write_Character(unsigned char Character)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]

#ifdef Eight_Bit_Mode

	HAL_LCD_Is_Busy();
 80006e6:	f7ff ff7d 	bl	80005e4 <HAL_LCD_Is_Busy>
	MCAL_GPIO_WritePort(LCD_Port, Character);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <HAL_LCD_Write_Character+0x44>)
 80006f2:	f000 fad6 	bl	8000ca2 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_PIN_Set);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <HAL_LCD_Write_Character+0x44>)
 80006fe:	f000 fab9 	bl	8000c74 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Reset);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_LCD_Write_Character+0x44>)
 800070a:	f000 fab3 	bl	8000c74 <MCAL_GPIO_WritePin>

	delay_ms(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff fe10 	bl	8000334 <delay_ms>
	HAL_LCD_Kick();
 8000714:	f7ff ff50 	bl	80005b8 <HAL_LCD_Kick>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_PIN_Set);
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_PIN_Reset);
	HAL_LCD_Kick();

#endif
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010800 	.word	0x40010800

08000724 <HAL_LCD_Write_String>:

void HAL_LCD_Write_String(char *String)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	int Count = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
	while(*String != 0)
 8000730:	e01c      	b.n	800076c <HAL_LCD_Write_String+0x48>
	{
		Count++;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
		HAL_LCD_Write_Character(*String++);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffcb 	bl	80006dc <HAL_LCD_Write_Character>

		if (Count == 16)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b10      	cmp	r3, #16
 800074a:	d104      	bne.n	8000756 <HAL_LCD_Write_String+0x32>
		{
			HAL_LCD_GoTo_XY(2, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff ff70 	bl	8000634 <HAL_LCD_GoTo_XY>
 8000754:	e00a      	b.n	800076c <HAL_LCD_Write_String+0x48>
		}
		else if (Count == 32)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2b20      	cmp	r3, #32
 800075a:	d107      	bne.n	800076c <HAL_LCD_Write_String+0x48>
		{
			HAL_LCD_Clear_Display();
 800075c:	f7ff ff93 	bl	8000686 <HAL_LCD_Clear_Display>
			HAL_LCD_GoTo_XY(1, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff66 	bl	8000634 <HAL_LCD_GoTo_XY>
			Count = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
	while(*String != 0)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1de      	bne.n	8000732 <HAL_LCD_Write_String+0xe>
		}
	}
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_LCD_Blink_On>:

void HAL_LCD_Blink_On(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DisplayControl | LCD_Blink | Display_Feature);
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_LCD_Blink_On+0x2c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f043 0309 	orr.w	r3, r3, #9
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff81 	bl	8000694 <HAL_LCD_Send_Command>
	Display_Feature |= LCD_Blink;
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_LCD_Blink_On+0x2c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_LCD_Blink_On+0x2c>)
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000003c 	.word	0x2000003c

080007ac <HAL_LCD_Cursor_On>:
	HAL_LCD_Send_Command(LCD_DisplayControl | Display_Feature);

}

void HAL_LCD_Cursor_On(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DisplayControl | LCD_Cursor | Display_Feature);
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_LCD_Cursor_On+0x2c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f043 030a 	orr.w	r3, r3, #10
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff69 	bl	8000694 <HAL_LCD_Send_Command>
	Display_Feature |= LCD_Cursor;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_LCD_Cursor_On+0x2c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_LCD_Cursor_On+0x2c>)
 80007d0:	701a      	strb	r2, [r3, #0]
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000003c 	.word	0x2000003c

080007dc <HAL_LCD_Display_On>:
	Display_Feature &= ~(LCD_Cursor);
	HAL_LCD_Send_Command(LCD_DisplayControl | Display_Feature);
}

void HAL_LCD_Display_On(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DisplayControl | LCD_Display | Display_Feature);
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_LCD_Display_On+0x2c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f043 030c 	orr.w	r3, r3, #12
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff51 	bl	8000694 <HAL_LCD_Send_Command>
	Display_Feature |= LCD_Display;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_LCD_Display_On+0x2c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_LCD_Display_On+0x2c>)
 8000800:	701a      	strb	r2, [r3, #0]
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000003c 	.word	0x2000003c

0800080c <HAL_Seven_Segment_Init>:
 */

#include "Seven_Segment.h"

void HAL_Seven_Segment_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig;

	// Config Pin 9 ===> g
	PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000816:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2304      	movs	r3, #4
 800081a:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800081c:	2301      	movs	r3, #1
 800081e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4829      	ldr	r0, [pc, #164]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 8000826:	f000 f98f 	bl	8000b48 <MCAL_GPIO_Init>

	// Config Pin 10 ===> f
	PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2304      	movs	r3, #4
 8000832:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000834:	2301      	movs	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4823      	ldr	r0, [pc, #140]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 800083e:	f000 f983 	bl	8000b48 <MCAL_GPIO_Init>

	// Config Pin 11 ===> e
	PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000846:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2304      	movs	r3, #4
 800084a:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800084c:	2301      	movs	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	481d      	ldr	r0, [pc, #116]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 8000856:	f000 f977 	bl	8000b48 <MCAL_GPIO_Init>

	// Config Pin 12 ===> d
	PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2304      	movs	r3, #4
 8000862:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000864:	2301      	movs	r3, #1
 8000866:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4817      	ldr	r0, [pc, #92]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 800086e:	f000 f96b 	bl	8000b48 <MCAL_GPIO_Init>

	// Config Pin 13 ===> c
	PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2304      	movs	r3, #4
 800087a:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800087c:	2301      	movs	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 8000886:	f000 f95f 	bl	8000b48 <MCAL_GPIO_Init>

	// Config Pin 14 ===> b
	PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800088a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800088e:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2304      	movs	r3, #4
 8000892:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000894:	2301      	movs	r3, #1
 8000896:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 800089e:	f000 f953 	bl	8000b48 <MCAL_GPIO_Init>

	// Config Pin 15 ===> a
	PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80008a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008a6:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2304      	movs	r3, #4
 80008aa:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008ac:	2301      	movs	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Seven_Segmant_Port, &PinConfig);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 80008b6:	f000 f947 	bl	8000b48 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(Seven_Segmant_Port, 0x7f << 9);
 80008ba:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <HAL_Seven_Segment_Init+0xc0>)
 80008c0:	f000 f9ef 	bl	8000ca2 <MCAL_GPIO_WritePort>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <HAL_Seven_Segment_Send>:

void HAL_Seven_Segment_Send(uint8_t Number)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(Seven_Segmant_Port, Number << 9);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	025b      	lsls	r3, r3, #9
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	4619      	mov	r1, r3
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <HAL_Seven_Segment_Send+0x24>)
 80008e6:	f000 f9dc 	bl	8000ca2 <MCAL_GPIO_WritePort>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010c00 	.word	0x40010c00

080008f8 <Clock_Init>:
#include "LCD.h"
#include "Keypad.h"
#include "Seven_Segment.h"

void Clock_Init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();								/* Enable GPIO PORTA Clock*/
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <Clock_Init+0x24>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <Clock_Init+0x24>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();								/* Enable GPIO PORTB Clock*/
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <Clock_Init+0x24>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <Clock_Init+0x24>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000

08000920 <delay_ms>:

static void delay_ms(uint32_t time)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e00b      	b.n	8000946 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	e002      	b.n	800093a <delay_ms+0x1a>
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3301      	adds	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2bfe      	cmp	r3, #254	; 0xfe
 800093e:	d9f9      	bls.n	8000934 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	429a      	cmp	r2, r3
 800094c:	d3ef      	bcc.n	800092e <delay_ms+0xe>
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <main>:

int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
	unsigned char numbers[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <main+0xc4>)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	ca07      	ldmia	r2, {r0, r1, r2}
 8000966:	c303      	stmia	r3!, {r0, r1}
 8000968:	801a      	strh	r2, [r3, #0]
 800096a:	3302      	adds	r3, #2
 800096c:	0c12      	lsrs	r2, r2, #16
 800096e:	701a      	strb	r2, [r3, #0]
	uint8_t Segment_Numbers[] = {Zero, One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Zero};
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <main+0xc8>)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	ca07      	ldmia	r2, {r0, r1, r2}
 8000976:	c303      	stmia	r3!, {r0, r1}
 8000978:	801a      	strh	r2, [r3, #0]
 800097a:	3302      	adds	r3, #2
 800097c:	0c12      	lsrs	r2, r2, #16
 800097e:	701a      	strb	r2, [r3, #0]
	unsigned char Key_Pressed;
	Clock_Init();									// Clock Init
 8000980:	f7ff ffba 	bl	80008f8 <Clock_Init>
	HAL_LCD_Init();									// LCD Init
 8000984:	f7ff fdbc 	bl	8000500 <HAL_LCD_Init>
	HAL_LCD_Write_String("HEY!!");					// Send HEY
 8000988:	4826      	ldr	r0, [pc, #152]	; (8000a24 <main+0xcc>)
 800098a:	f7ff fecb 	bl	8000724 <HAL_LCD_Write_String>
	HAL_LCD_GoTo_XY(2, 2);
 800098e:	2102      	movs	r1, #2
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fe4f 	bl	8000634 <HAL_LCD_GoTo_XY>
	HAL_LCD_Write_String("This Is Mina!");
 8000996:	4824      	ldr	r0, [pc, #144]	; (8000a28 <main+0xd0>)
 8000998:	f7ff fec4 	bl	8000724 <HAL_LCD_Write_String>
	HAL_Seven_Segment_Init();
 800099c:	f7ff ff36 	bl	800080c <HAL_Seven_Segment_Init>
	delay_ms(50);									// wait a 50 Sec
 80009a0:	2032      	movs	r0, #50	; 0x32
 80009a2:	f7ff ffbd 	bl	8000920 <delay_ms>
	HAL_LCD_Clear_Display();						// Clear Display
 80009a6:	f7ff fe6e 	bl	8000686 <HAL_LCD_Clear_Display>

	for (int i = 0; i < 11; i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
 80009ae:	e014      	b.n	80009da <main+0x82>
	{
		HAL_LCD_Write_Character(numbers[i]);
 80009b0:	f107 0210 	add.w	r2, r7, #16
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe8e 	bl	80006dc <HAL_LCD_Write_Character>
		HAL_Seven_Segment_Send(Segment_Numbers[i]);
 80009c0:	1d3a      	adds	r2, r7, #4
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff81 	bl	80008d0 <HAL_Seven_Segment_Send>
		delay_ms(100);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f7ff ffa6 	bl	8000920 <delay_ms>
	for (int i = 0; i < 11; i++)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b0a      	cmp	r3, #10
 80009de:	dde7      	ble.n	80009b0 <main+0x58>
	}
	HAL_Keypad_Init();								// Keypad Init
 80009e0:	f7ff fbe2 	bl	80001a8 <HAL_Keypad_Init>
	delay_ms(50);									// wait a 50 Sec
 80009e4:	2032      	movs	r0, #50	; 0x32
 80009e6:	f7ff ff9b 	bl	8000920 <delay_ms>
	HAL_LCD_Clear_Display();						// Clear Display
 80009ea:	f7ff fe4c 	bl	8000686 <HAL_LCD_Clear_Display>
	HAL_LCD_Write_String("Keypad Is Ready");		// Send Keypad Is Ready
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <main+0xd4>)
 80009f0:	f7ff fe98 	bl	8000724 <HAL_LCD_Write_String>
	delay_ms(50);									// wait a 50 Sec
 80009f4:	2032      	movs	r0, #50	; 0x32
 80009f6:	f7ff ff93 	bl	8000920 <delay_ms>
	HAL_LCD_Clear_Display();						// Clear Display
 80009fa:	f7ff fe44 	bl	8000686 <HAL_LCD_Clear_Display>

	while(1)
	{
		Key_Pressed = HAL_Keypad_Getkey();
 80009fe:	f7ff fc2d 	bl	800025c <HAL_Keypad_Getkey>
 8000a02:	4603      	mov	r3, r0
 8000a04:	76fb      	strb	r3, [r7, #27]

		switch (Key_Pressed) {
 8000a06:	7efb      	ldrb	r3, [r7, #27]
 8000a08:	2b41      	cmp	r3, #65	; 0x41
 8000a0a:	d004      	beq.n	8000a16 <main+0xbe>
			case 'A':
				break;

			default:
				HAL_LCD_Write_Character(Key_Pressed);
 8000a0c:	7efb      	ldrb	r3, [r7, #27]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe64 	bl	80006dc <HAL_LCD_Write_Character>
				break;
 8000a14:	e000      	b.n	8000a18 <main+0xc0>
				break;
 8000a16:	bf00      	nop
		Key_Pressed = HAL_Keypad_Getkey();
 8000a18:	e7f1      	b.n	80009fe <main+0xa6>
 8000a1a:	bf00      	nop
 8000a1c:	08000d48 	.word	0x08000d48
 8000a20:	08000d54 	.word	0x08000d54
 8000a24:	08000d20 	.word	0x08000d20
 8000a28:	08000d28 	.word	0x08000d28
 8000a2c:	08000d38 	.word	0x08000d38

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f000 f92f 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff ff79 	bl	8000958 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a74:	08000d68 	.word	0x08000d68
  ldr r2, =_sbss
 8000a78:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a7c:	20000044 	.word	0x20000044

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>

08000a82 <Get_Pin_Location>:
 * @retval		- Location of selected pin in which configuration bits start
 * Note			- None
 *****************************************************************************************
 */
uint8_t Get_Pin_Location(uint16_t PinNumber)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	80fb      	strh	r3, [r7, #6]

	switch (PinNumber) {
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	2b80      	cmp	r3, #128	; 0x80
 8000a90:	d042      	beq.n	8000b18 <Get_Pin_Location+0x96>
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	dc11      	bgt.n	8000aba <Get_Pin_Location+0x38>
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d036      	beq.n	8000b08 <Get_Pin_Location+0x86>
 8000a9a:	2b08      	cmp	r3, #8
 8000a9c:	dc06      	bgt.n	8000aac <Get_Pin_Location+0x2a>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d02e      	beq.n	8000b00 <Get_Pin_Location+0x7e>
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d02e      	beq.n	8000b04 <Get_Pin_Location+0x82>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d028      	beq.n	8000afc <Get_Pin_Location+0x7a>
 8000aaa:	e047      	b.n	8000b3c <Get_Pin_Location+0xba>
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d02f      	beq.n	8000b10 <Get_Pin_Location+0x8e>
 8000ab0:	2b40      	cmp	r3, #64	; 0x40
 8000ab2:	d02f      	beq.n	8000b14 <Get_Pin_Location+0x92>
 8000ab4:	2b10      	cmp	r3, #16
 8000ab6:	d029      	beq.n	8000b0c <Get_Pin_Location+0x8a>
 8000ab8:	e040      	b.n	8000b3c <Get_Pin_Location+0xba>
 8000aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000abe:	d033      	beq.n	8000b28 <Get_Pin_Location+0xa6>
 8000ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ac4:	dc09      	bgt.n	8000ada <Get_Pin_Location+0x58>
 8000ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aca:	d029      	beq.n	8000b20 <Get_Pin_Location+0x9e>
 8000acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad0:	d028      	beq.n	8000b24 <Get_Pin_Location+0xa2>
 8000ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad6:	d021      	beq.n	8000b1c <Get_Pin_Location+0x9a>
 8000ad8:	e030      	b.n	8000b3c <Get_Pin_Location+0xba>
 8000ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ade:	d027      	beq.n	8000b30 <Get_Pin_Location+0xae>
 8000ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae4:	dc03      	bgt.n	8000aee <Get_Pin_Location+0x6c>
 8000ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aea:	d01f      	beq.n	8000b2c <Get_Pin_Location+0xaa>
 8000aec:	e026      	b.n	8000b3c <Get_Pin_Location+0xba>
 8000aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000af2:	d01f      	beq.n	8000b34 <Get_Pin_Location+0xb2>
 8000af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000af8:	d01e      	beq.n	8000b38 <Get_Pin_Location+0xb6>
 8000afa:	e01f      	b.n	8000b3c <Get_Pin_Location+0xba>
		case GPIO_PIN_0:
			return 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e01e      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_1:
			return 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	e01c      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_2:
			return 8;
 8000b04:	2308      	movs	r3, #8
 8000b06:	e01a      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_3:
			return 12;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	e018      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_4:
			return 16;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	e016      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_5:
			return 20;
 8000b10:	2314      	movs	r3, #20
 8000b12:	e014      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_6:
			return 24;
 8000b14:	2318      	movs	r3, #24
 8000b16:	e012      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_7:
			return 28;
 8000b18:	231c      	movs	r3, #28
 8000b1a:	e010      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_8:
			return 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e00e      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_9:
			return 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	e00c      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_10:
			return 8;
 8000b24:	2308      	movs	r3, #8
 8000b26:	e00a      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_11:
			return 12;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	e008      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_12:
			return 16;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	e006      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_13:
			return 20;
 8000b30:	2314      	movs	r3, #20
 8000b32:	e004      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_14:
			return 24;
 8000b34:	2318      	movs	r3, #24
 8000b36:	e002      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
		case GPIO_PIN_15:
			return 28;
 8000b38:	231c      	movs	r3, #28
 8000b3a:	e000      	b.n	8000b3e <Get_Pin_Location+0xbc>
			break;
	}
	return 1;
 8000b3c:	2301      	movs	r3, #1
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <MCAL_GPIO_Init>:
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				  But LQFP48 Package Has Only A,B, Part Of C,D Exported As External Pins
 *****************************************************************************************
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	/*First we should select Port Configuration Register to be configured
	  GPIOx->CRL for Pins from 0 To 7 *** GPIOx_CRH for pins From 8 to 15 */
	volatile uint32_t *ConfigRegister = NULL;													// Pointer to hold register address
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Configuration = 0;																// Variable to hold pin 4 bit configuration
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;		// Assign Register Address Based on Pin Number
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	2bff      	cmp	r3, #255	; 0xff
 8000b60:	d801      	bhi.n	8000b66 <MCAL_GPIO_Init+0x1e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	e001      	b.n	8000b6a <MCAL_GPIO_Init+0x22>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	60bb      	str	r3, [r7, #8]

	/*Clear Selected Pin Bits CNFx[1:0]  MODEx[1:0]*/
	*ConfigRegister &= ~(0xF << Get_Pin_Location(PinConfig->GPIO_PinNumber));
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff86 	bl	8000a82 <Get_Pin_Location>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	401a      	ands	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	601a      	str	r2, [r3, #0]

	/*Now we select configuration register and Clear it, then we need to check required mode to set configuration register*/
	/* First Check if GPIO is Output Mode */
	if ((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) ||
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	789b      	ldrb	r3, [r3, #2]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d00b      	beq.n	8000baa <MCAL_GPIO_Init+0x62>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	789b      	ldrb	r3, [r3, #2]
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d007      	beq.n	8000baa <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_OD))
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	789b      	ldrb	r3, [r3, #2]
	if ((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) ||
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d003      	beq.n	8000baa <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_OD))
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	2b07      	cmp	r3, #7
 8000ba8:	d10e      	bne.n	8000bc8 <MCAL_GPIO_Init+0x80>
	{
		/*if the Mode is output we need to configure   CNFx[1:0]  MODEx[1:0]
		  CNFx = GPIO_MODE_Define  ***  MODEx = GPIO_SPEED_Define */
		Pin_Configuration = ((((PinConfig->GPIO_Mode - 4) << 2) | PinConfig->GPIO_Output_Speed) & 0x0F);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	789b      	ldrb	r3, [r3, #2]
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	b25a      	sxtb	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	78db      	ldrb	r3, [r3, #3]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e02c      	b.n	8000c22 <MCAL_GPIO_Init+0xda>
	}
	/*if Mode is not Output Then Mode will be Input so we need to check which Input mode was selected */
	else
	{
		if ((PinConfig->GPIO_Mode == GPIO_MODE_Analog) || (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <MCAL_GPIO_Init+0x90>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d107      	bne.n	8000be8 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNFx[1:0] MODEx[1:0]00
			Pin_Configuration = ((((PinConfig->GPIO_Mode) << 2) | 0x0) & 0x0F);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	789b      	ldrb	r3, [r3, #2]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e01c      	b.n	8000c22 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	789b      	ldrb	r3, [r3, #2]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d102      	bne.n	8000bf6 <MCAL_GPIO_Init+0xae>
			{
				// Set CNFx[1:0]01 MODEx[1:0]00
				Pin_Configuration = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0F);
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e015      	b.n	8000c22 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// Set CNFx[1:0]10 MODEx[1:0]00
				Pin_Configuration = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	73fb      	strb	r3, [r7, #15]

				if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d107      	bne.n	8000c12 <MCAL_GPIO_Init+0xca>
				{
					// PxODR Pin Bit = 1 for Input Pull-Up, Refer to Table 20: Port bit configuration table.
					GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	8812      	ldrh	r2, [r2, #0]
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	e007      	b.n	8000c22 <MCAL_GPIO_Init+0xda>
				}
				else
				{
					// PxODR Pin Bit = 0 for Input Pull-Down, Refer to Table 20: Port bit configuration table.
					GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	8812      	ldrh	r2, [r2, #0]
 8000c1a:	43d2      	mvns	r2, r2
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60da      	str	r2, [r3, #12]
				}
			}
		}
	}
	// Set Pin configuration into Selected Configuration Register at Selected Pin Location
	*ConfigRegister |= Pin_Configuration << Get_Pin_Location(PinConfig->GPIO_PinNumber);
 8000c22:	7bfc      	ldrb	r4, [r7, #15]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff2a 	bl	8000a82 <Get_Pin_Location>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	fa04 f203 	lsl.w	r2, r4, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <MCAL_GPIO_ReadPin>:
 * @retval		- Input Pin Value (Two Values Based On @ref GPIO_PIN_State)
 * Note			- None
 *****************************************************************************************
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if (GPIOx->IDR & PinNumber)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_Set;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <MCAL_GPIO_ReadPin+0x22>
	} else
	{
		bitStatus = GPIO_PIN_Reset;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <MCAL_GPIO_WritePin>:
 * @retval		- None
 * Note			- None
 *****************************************************************************************
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
	if (Value)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <MCAL_GPIO_WritePin+0x1e>
	//  Port Bit Set/Reset Register "BSRR"
	//	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	//	These bits are write-only and can be accessed in Word mode only.
	//	0: No action on the corresponding ODRx bit
	//	1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	611a      	str	r2, [r3, #16]
	//	These bits are write-only and can be accessed in Word mode only.
	//	0: No action on the corresponding ODRx bit
	//	1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000c90:	e002      	b.n	8000c98 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000c92:	887a      	ldrh	r2, [r7, #2]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	615a      	str	r2, [r3, #20]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <MCAL_GPIO_WritePort>:
 * @retval		- None
 * Note			- None
 *****************************************************************************************
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t) Value;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60da      	str	r2, [r3, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	4e0c      	ldr	r6, [pc, #48]	; (8000cf8 <__libc_init_array+0x38>)
 8000cc6:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <__libc_init_array+0x3c>)
 8000cc8:	1ba4      	subs	r4, r4, r6
 8000cca:	10a4      	asrs	r4, r4, #2
 8000ccc:	42a5      	cmp	r5, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	f000 f81a 	bl	8000d08 <_init>
 8000cd4:	2500      	movs	r5, #0
 8000cd6:	4e0a      	ldr	r6, [pc, #40]	; (8000d00 <__libc_init_array+0x40>)
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <__libc_init_array+0x44>)
 8000cda:	1ba4      	subs	r4, r4, r6
 8000cdc:	10a4      	asrs	r4, r4, #2
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce8:	4798      	blx	r3
 8000cea:	3501      	adds	r5, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cf2:	4798      	blx	r3
 8000cf4:	3501      	adds	r5, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	08000d60 	.word	0x08000d60
 8000cfc:	08000d60 	.word	0x08000d60
 8000d00:	08000d60 	.word	0x08000d60
 8000d04:	08000d64 	.word	0x08000d64

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
