
LCD_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b47  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fe  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000611  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000360  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  8a:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_Init>:
						  {'1', '2', '3', '-'},
						  {'C', '0', '=', '+'}};

void Keypad_Init(void)
{
	Keypad_Port_Dir = 0x0F;
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	81 bb       	out	0x11, r24	; 17
	Keypad_Port |= (0xFF);
  96:	82 b3       	in	r24, 0x12	; 18
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret

0000009e <Keypad_Getkey>:


char Keypad_Getkey(void)
{
	int i,j;
	for (i = 0; i < 4; i++)
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	50 c0       	rjmp	.+160    	; 0x144 <Keypad_Getkey+0xa6>
	{
		if (i > 0){ Keypad_Port |= (1 << (i - 1)); }
  a4:	14 16       	cp	r1, r20
  a6:	15 06       	cpc	r1, r21
  a8:	6c f4       	brge	.+26     	; 0xc4 <Keypad_Getkey+0x26>
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	ba 01       	movw	r22, r20
  ae:	61 50       	subi	r22, 0x01	; 1
  b0:	71 09       	sbc	r23, r1
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Keypad_Getkey+0x1e>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <Keypad_Getkey+0x1a>
  c0:	82 2b       	or	r24, r18
  c2:	82 bb       	out	0x12, r24	; 18
		Keypad_Port &= ~(1 << i);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	04 2e       	mov	r0, r20
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Keypad_Getkey+0x34>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <Keypad_Getkey+0x30>
  d6:	96 2f       	mov	r25, r22
  d8:	90 95       	com	r25
  da:	89 23       	and	r24, r25
  dc:	82 bb       	out	0x12, r24	; 18
		
		for (j = 0; j < 4; j++)
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	25 c0       	rjmp	.+74     	; 0x12e <Keypad_Getkey+0x90>
		{
			if (((Keypad_Port_Pin >> 4 >> j) & 1) == 0)
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	82 95       	swap	r24
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Keypad_Getkey+0x56>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <Keypad_Getkey+0x52>
  f8:	80 fd       	sbrc	r24, 0
  fa:	17 c0       	rjmp	.+46     	; 0x12a <Keypad_Getkey+0x8c>
			{
				while(((Keypad_Port_Pin >> 4 >> j) & 1) == 0);
  fc:	80 b3       	in	r24, 0x10	; 16
  fe:	82 95       	swap	r24
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <Keypad_Getkey+0x6e>
 108:	95 95       	asr	r25
 10a:	87 95       	ror	r24
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <Keypad_Getkey+0x6a>
 110:	80 ff       	sbrs	r24, 0
 112:	f4 cf       	rjmp	.-24     	; 0xfc <Keypad_Getkey+0x5e>
				return Keypad_Keys[i][j];
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	40 5a       	subi	r20, 0xA0	; 160
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	fa 01       	movw	r30, r20
 122:	e2 0f       	add	r30, r18
 124:	f3 1f       	adc	r31, r19
 126:	80 81       	ld	r24, Z
 128:	08 95       	ret
	for (i = 0; i < 4; i++)
	{
		if (i > 0){ Keypad_Port |= (1 << (i - 1)); }
		Keypad_Port &= ~(1 << i);
		
		for (j = 0; j < 4; j++)
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	24 30       	cpi	r18, 0x04	; 4
 130:	31 05       	cpc	r19, r1
 132:	c4 f2       	brlt	.-80     	; 0xe4 <Keypad_Getkey+0x46>
			{
				while(((Keypad_Port_Pin >> 4 >> j) & 1) == 0);
				return Keypad_Keys[i][j];
			}
		}
		if (i == 3){ Keypad_Port |= (1 << i); }
 134:	43 30       	cpi	r20, 0x03	; 3
 136:	51 05       	cpc	r21, r1
 138:	19 f4       	brne	.+6      	; 0x140 <Keypad_Getkey+0xa2>
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	68 2b       	or	r22, r24
 13e:	62 bb       	out	0x12, r22	; 18


char Keypad_Getkey(void)
{
	int i,j;
	for (i = 0; i < 4; i++)
 140:	4f 5f       	subi	r20, 0xFF	; 255
 142:	5f 4f       	sbci	r21, 0xFF	; 255
 144:	44 30       	cpi	r20, 0x04	; 4
 146:	51 05       	cpc	r21, r1
 148:	0c f4       	brge	.+2      	; 0x14c <Keypad_Getkey+0xae>
 14a:	ac cf       	rjmp	.-168    	; 0xa4 <Keypad_Getkey+0x6>
				return Keypad_Keys[i][j];
			}
		}
		if (i == 3){ Keypad_Port |= (1 << i); }
	}
	return 'A';
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	08 95       	ret

00000150 <LCD_Kick>:
}

void LCD_Cursor_Off(void)
{
	Display_Feature &= ~(LCD_Cursor);
	LCD_Send_Command(LCD_DisplayControl | Display_Feature);
 150:	88 b3       	in	r24, 0x18	; 24
 152:	88 60       	ori	r24, 0x08	; 8
 154:	88 bb       	out	0x18, r24	; 24
 156:	2f e7       	ldi	r18, 0x7F	; 127
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <LCD_Kick+0xc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Kick+0x16>
 166:	00 00       	nop
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	87 7f       	andi	r24, 0xF7	; 247
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	08 95       	ret

00000170 <LCD_Is_Busy>:
 170:	8a b3       	in	r24, 0x1a	; 26
 172:	1a ba       	out	0x1a, r1	; 26
 174:	88 b3       	in	r24, 0x18	; 24
 176:	84 60       	ori	r24, 0x04	; 4
 178:	88 bb       	out	0x18, r24	; 24
 17a:	88 b3       	in	r24, 0x18	; 24
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	88 bb       	out	0x18, r24	; 24
 180:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_Kick>
 184:	8a b3       	in	r24, 0x1a	; 26
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	8a bb       	out	0x1a, r24	; 26
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	88 bb       	out	0x18, r24	; 24
 190:	08 95       	ret

00000192 <LCD_Send_Command>:
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
 196:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Is_Busy>
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	89 7f       	andi	r24, 0xF9	; 249
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	cb bb       	out	0x1b, r28	; 27
 1a2:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_Kick>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <LCD_Clear_Display>:
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_Command>
 1b0:	08 95       	ret

000001b2 <LCD_Send_Character>:
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
 1b6:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Is_Busy>
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	cb bb       	out	0x1b, r28	; 27
 1c8:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_Kick>
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCD_Blink_On>:
 1d0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1d4:	89 60       	ori	r24, 0x09	; 9
 1d6:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_Command>
 1da:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1e4:	08 95       	ret

000001e6 <LCD_Cursor_On>:
 1e6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1ea:	8a 60       	ori	r24, 0x0A	; 10
 1ec:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_Command>
 1f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1fa:	08 95       	ret

000001fc <LCD_Display_On>:
}

void LCD_Display_On(void)
{
	LCD_Send_Command(LCD_DisplayControl | LCD_Display | Display_Feature);
 1fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 200:	8c 60       	ori	r24, 0x0C	; 12
 202:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_Command>
	Display_Feature |= LCD_Display;
 206:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 210:	08 95       	ret

00000212 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9c e9       	ldi	r25, 0x9C	; 156
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Init+0x4>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Init+0xa>
 21c:	00 00       	nop
volatile unsigned char Display_Feature = 0;

void LCD_Init(void)
{
	_delay_ms(20);
	LCD_Ctrl_Dir |= (1 << RS_Switch | 1 << RW_Switch | 1 << EN_Switch);
 21e:	87 b3       	in	r24, 0x17	; 23
 220:	8e 60       	ori	r24, 0x0E	; 14
 222:	87 bb       	out	0x17, r24	; 23
	LCD_Ctrl &= ~(1 << RS_Switch | 1 << RW_Switch | 1 << EN_Switch);
 224:	88 b3       	in	r24, 0x18	; 24
 226:	81 7f       	andi	r24, 0xF1	; 241
 228:	88 bb       	out	0x18, r24	; 24
	LCD_Port_Dir = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_Init+0x20>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_Init+0x26>
 238:	00 00       	nop
	_delay_ms(20);
	
	#ifdef Eight_Bit_Mode
		LCD_Send_Command(LCD_FunctionSet | LCD_8bit_Mode | LCD_2Line);
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_Command>
	#ifdef Four_Bit_Mode
		LCD_Send_Command(LCD_ReturnHome);
		LCD_Send_Command(LCD_FunctionSet | LCD_4bit_Mode | LCD_2Line);
	#endif
	
	LCD_Clear_Display();
 240:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Clear_Display>
	LCD_Send_Command(LCD_EntryModeSet | LCD_Left_Dec);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_Command>
	LCD_Display_On();
 24a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Display_On>
	LCD_Blink_On();
 24e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Blink_On>
	LCD_Cursor_On();
 252:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Cursor_On>
 256:	08 95       	ret

00000258 <main>:


int main(void)
{
	char Pressed_Key;
    LCD_Init();
 258:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	Keypad_Init();
 25c:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_Init>
	
    while (1) 
    {
		Pressed_Key = Keypad_Getkey();
 260:	0e 94 4f 00 	call	0x9e	; 0x9e <Keypad_Getkey>
		
		switch(Pressed_Key)
 264:	81 34       	cpi	r24, 0x41	; 65
 266:	e1 f3       	breq	.-8      	; 0x260 <main+0x8>
 268:	83 34       	cpi	r24, 0x43	; 67
 26a:	19 f4       	brne	.+6      	; 0x272 <main+0x1a>
		{
			case 'A':
				break;
				
			case 'C':
				LCD_Clear_Display();
 26c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Clear_Display>
				break;
 270:	f7 cf       	rjmp	.-18     	; 0x260 <main+0x8>
				
			default:
				LCD_Send_Character(Pressed_Key);
 272:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Send_Character>
				break;
 276:	f4 cf       	rjmp	.-24     	; 0x260 <main+0x8>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
