
Print_Learn_In_Depth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00000324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a62  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000671  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000523  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042e  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000332  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  8a:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Kick>:
}

void LCD_Cursor_Off(void)
{
	Display_Feature &= ~(LCD_Cursor);
	LCD_Send_Command(LCD_DisplayControl | Display_Feature);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
  98:	2f e7       	ldi	r18, 0x7F	; 127
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <LCD_Kick+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Kick+0x16>
  a8:	00 00       	nop
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <LCD_Send_Command>:
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	89 7f       	andi	r24, 0xF9	; 249
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	9c 2f       	mov	r25, r28
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	89 2b       	or	r24, r25
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Send_Command+0x1e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Send_Command+0x24>
  d6:	00 00       	nop
  d8:	2b b3       	in	r18, 0x1b	; 27
  da:	30 e1       	ldi	r19, 0x10	; 16
  dc:	c3 9f       	mul	r28, r19
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	92 2f       	mov	r25, r18
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_GoTo_XY>:
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
  fc:	8b 01       	movw	r16, r22
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	49 f4       	brne	.+18     	; 0x114 <LCD_GoTo_XY+0x22>
 102:	77 23       	and	r23, r23
 104:	3c f0       	brlt	.+14     	; 0x114 <LCD_GoTo_XY+0x22>
 106:	60 31       	cpi	r22, 0x10	; 16
 108:	71 05       	cpc	r23, r1
 10a:	24 f4       	brge	.+8      	; 0x114 <LCD_GoTo_XY+0x22>
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	86 0f       	add	r24, r22
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
 114:	22 97       	sbiw	r28, 0x02	; 2
 116:	49 f4       	brne	.+18     	; 0x12a <LCD_GoTo_XY+0x38>
 118:	11 23       	and	r17, r17
 11a:	3c f0       	brlt	.+14     	; 0x12a <LCD_GoTo_XY+0x38>
 11c:	00 31       	cpi	r16, 0x10	; 16
 11e:	11 05       	cpc	r17, r1
 120:	24 f4       	brge	.+8      	; 0x12a <LCD_GoTo_XY+0x38>
 122:	80 ec       	ldi	r24, 0xC0	; 192
 124:	80 0f       	add	r24, r16
 126:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <LCD_Clear_Display>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
 13a:	08 95       	ret

0000013c <LCD_Send_Character>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	9c 2f       	mov	r25, r28
 146:	90 7f       	andi	r25, 0xF0	; 240
 148:	89 2b       	or	r24, r25
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	88 bb       	out	0x18, r24	; 24
 152:	88 b3       	in	r24, 0x18	; 24
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	88 bb       	out	0x18, r24	; 24
 158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	30 e1       	ldi	r19, 0x10	; 16
 160:	c3 9f       	mul	r28, r19
 162:	c0 01       	movw	r24, r0
 164:	11 24       	eor	r1, r1
 166:	92 2f       	mov	r25, r18
 168:	9f 70       	andi	r25, 0x0F	; 15
 16a:	89 2b       	or	r24, r25
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	82 60       	ori	r24, 0x02	; 2
 172:	88 bb       	out	0x18, r24	; 24
 174:	88 b3       	in	r24, 0x18	; 24
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	88 bb       	out	0x18, r24	; 24
 17a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <LCD_Send_String>:
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	8c 01       	movw	r16, r24
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	1c c0       	rjmp	.+56     	; 0x1ca <LCD_Send_String+0x48>
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	0f 5f       	subi	r16, 0xFF	; 255
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Send_Character>
 19c:	c0 31       	cpi	r28, 0x10	; 16
 19e:	d1 05       	cpc	r29, r1
 1a0:	39 f4       	brne	.+14     	; 0x1b0 <LCD_Send_String+0x2e>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_GoTo_XY>
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <LCD_Send_String+0x48>
 1b0:	c0 32       	cpi	r28, 0x20	; 32
 1b2:	d1 05       	cpc	r29, r1
 1b4:	51 f4       	brne	.+20     	; 0x1ca <LCD_Send_String+0x48>
 1b6:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear_Display>
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_GoTo_XY>
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	f8 01       	movw	r30, r16
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	e0 cf       	rjmp	.-64     	; 0x192 <LCD_Send_String+0x10>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <LCD_Blink_On>:
 1dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1e0:	89 60       	ori	r24, 0x09	; 9
 1e2:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
 1e6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1f0:	08 95       	ret

000001f2 <LCD_Cursor_On>:
 1f2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1f6:	8a 60       	ori	r24, 0x0A	; 10
 1f8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
 1fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 200:	82 60       	ori	r24, 0x02	; 2
 202:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 206:	08 95       	ret

00000208 <LCD_Display_On>:
}

void LCD_Display_On(void)
{
	LCD_Send_Command(LCD_DisplayControl | LCD_Display | Display_Feature);
 208:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 20c:	8c 60       	ori	r24, 0x0C	; 12
 20e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
	Display_Feature |= LCD_Display;
 212:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 216:	84 60       	ori	r24, 0x04	; 4
 218:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 21c:	08 95       	ret

0000021e <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9c e9       	ldi	r25, 0x9C	; 156
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Init+0x4>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0xa>
 228:	00 00       	nop
volatile unsigned char Display_Feature = 0;

void LCD_Init(void)
{
	_delay_ms(20);
	LCD_Ctrl_Dir |= (1 << RS_Switch | 1 << RW_Switch | 1 << EN_Switch);
 22a:	87 b3       	in	r24, 0x17	; 23
 22c:	8e 60       	ori	r24, 0x0E	; 14
 22e:	87 bb       	out	0x17, r24	; 23
	LCD_Ctrl &= ~(1 << RS_Switch | 1 << RW_Switch | 1 << EN_Switch);
 230:	88 b3       	in	r24, 0x18	; 24
 232:	81 7f       	andi	r24, 0xF1	; 241
 234:	88 bb       	out	0x18, r24	; 24
	LCD_Port_Dir = 0xFF;
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	8a bb       	out	0x1a, r24	; 26
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_Init+0x20>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_Init+0x26>
 244:	00 00       	nop
	#ifdef Eight_Bit_Mode
		LCD_Send_Command(LCD_FunctionSet | LCD_8bit_Mode | LCD_2Line);
	#endif
	
	#ifdef Four_Bit_Mode
		LCD_Send_Command(LCD_ReturnHome);
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
		LCD_Send_Command(LCD_FunctionSet | LCD_4bit_Mode | LCD_2Line);
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
	#endif
	
	LCD_Clear_Display();
 252:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear_Display>
	LCD_Send_Command(LCD_EntryModeSet | LCD_Left_Dec);
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Command>
	LCD_Display_On();
 25c:	0e 94 04 01 	call	0x208	; 0x208 <LCD_Display_On>
	LCD_Blink_On();
 260:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_Blink_On>
	LCD_Cursor_On();
 264:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Cursor_On>
 268:	08 95       	ret

0000026a <main>:
#include "LCD.h"


int main(void)
{
	LCD_Init();
 26a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_Send_String("Learn In Depth");
 26e:	80 e6       	ldi	r24, 0x60	; 96
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Send_String>

}
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
