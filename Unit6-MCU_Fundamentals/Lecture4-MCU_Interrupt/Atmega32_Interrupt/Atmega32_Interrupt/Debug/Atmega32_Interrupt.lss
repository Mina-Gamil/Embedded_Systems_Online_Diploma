
Atmega32_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069a  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_2>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{	
	/* Config. Ext. Interrupt 0 to any logic change*/
	MCUCR_Reg |= 0x01;
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	85 bf       	out	0x35, r24	; 53
	
	/* Config. Ext. Interrupt 0 to rising edge change*/
	MCUCR_Reg |= 0x0C;
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8c 60       	ori	r24, 0x0C	; 12
  76:	85 bf       	out	0x35, r24	; 53
	
	/* Config. Ext. Interrupt 0 to falling edge change*/
	MCUCSR_Reg &= ~(1 << 6);
  78:	84 b7       	in	r24, 0x34	; 52
  7a:	8f 7b       	andi	r24, 0xBF	; 191
  7c:	84 bf       	out	0x34, r24	; 52
	
	/* Enable Masking of Ext. Int. 0,1,2 */
	GICR_Reg |= 0xE0;
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 6e       	ori	r24, 0xE0	; 224
  82:	8b bf       	out	0x3b, r24	; 59
	
	/* Enable Global Interrupt */
	SREG_Reg |= 0x80;
  84:	8f b7       	in	r24, 0x3f	; 63
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8f bf       	out	0x3f, r24	; 63
	
	/* Config. Pin(5,6,7) To OUTPUT */
	GPIOD_Dir_Reg |= 0xE0;
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 6e       	ori	r24, 0xE0	; 224
  8e:	81 bb       	out	0x11, r24	; 17
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x24>

00000092 <__vector_1>:
	
    while (1);
}

ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	GPIOD_ODR_Reg |= 1 << 5;              /* Turn On LED connected to portD 5 */
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	98 e1       	ldi	r25, 0x18	; 24
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <__vector_1+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <__vector_1+0x26>
  b8:	00 00       	nop
	_delay_ms(1000);                      /* Delay For 1 Second */
	GPIOD_ODR_Reg &= ~(1 << 5);           /* Turn Off LED connected to portD 5 */
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	82 bb       	out	0x12, r24	; 18
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_2>:

ISR(INT1_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	GPIOD_ODR_Reg |= 1 << 6;             /* Turn On LED connected to portD 6 */
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <__vector_2+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__vector_2+0x26>
  f6:	00 00       	nop
	_delay_ms(1000);                     /* Delay For 1 Second */
	GPIOD_ODR_Reg &= ~(1 << 6);          /* Turn Off LED connected to portD 6 */
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 7b       	andi	r24, 0xBF	; 191
  fc:	82 bb       	out	0x12, r24	; 18
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_3>:

ISR(INT2_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	GPIOD_ODR_Reg |= 1 << 7;            /* Turn On LED connected to portD 7 */
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	80 68       	ori	r24, 0x80	; 128
 122:	82 bb       	out	0x12, r24	; 18
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 e6       	ldi	r24, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <__vector_3+0x1c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <__vector_3+0x26>
 134:	00 00       	nop
	_delay_ms(1000);                    /* Delay For 1 Second */
	GPIOD_ODR_Reg &= ~(1 << 7);         /* Turn Off LED connected to portD 7 */
 136:	82 b3       	in	r24, 0x12	; 18
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
