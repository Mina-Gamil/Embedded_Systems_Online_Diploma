
Unit7_Section1_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055e  00000000  00000000  000007f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f7  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait>:

#include <stdio.h>


void wait(uint32_t time)
{
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	0f 93       	push	r16
  76:	1f 93       	push	r17
  78:	6b 01       	movw	r12, r22
  7a:	7c 01       	movw	r14, r24
	for (int i = 0; i < time * 8000; i++);
  7c:	e0 e0       	ldi	r30, 0x00	; 0
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <wait+0x18>
  82:	31 96       	adiw	r30, 0x01	; 1
  84:	a0 e4       	ldi	r26, 0x40	; 64
  86:	bf e1       	ldi	r27, 0x1F	; 31
  88:	a7 01       	movw	r20, r14
  8a:	96 01       	movw	r18, r12
  8c:	0e 94 70 00 	call	0xe0	; 0xe0 <__muluhisi3>
  90:	8f 01       	movw	r16, r30
  92:	0f 2e       	mov	r0, r31
  94:	00 0c       	add	r0, r0
  96:	22 0b       	sbc	r18, r18
  98:	33 0b       	sbc	r19, r19
  9a:	06 17       	cp	r16, r22
  9c:	17 07       	cpc	r17, r23
  9e:	28 07       	cpc	r18, r24
  a0:	39 07       	cpc	r19, r25
  a2:	78 f3       	brcs	.-34     	; 0x82 <wait+0x16>
}
  a4:	1f 91       	pop	r17
  a6:	0f 91       	pop	r16
  a8:	ff 90       	pop	r15
  aa:	ef 90       	pop	r14
  ac:	df 90       	pop	r13
  ae:	cf 90       	pop	r12
  b0:	08 95       	ret

000000b2 <main>:
#include "Utils.h"


int main(void)
{
	DDRD = 0xF0;
  b2:	80 ef       	ldi	r24, 0xF0	; 240
  b4:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		if (readbit(PIND, 0) == 1)
  b6:	80 9b       	sbis	0x10, 0	; 16
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x4>
		{
			setbit(PORTD, 4);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	82 bb       	out	0x12, r24	; 18
			wait(1000);
  c0:	68 ee       	ldi	r22, 0xE8	; 232
  c2:	73 e0       	ldi	r23, 0x03	; 3
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
			resetbit(PORTD, 4);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	82 bb       	out	0x12, r24	; 18
			wait(1000);
  d2:	68 ee       	ldi	r22, 0xE8	; 232
  d4:	73 e0       	ldi	r23, 0x03	; 3
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
  de:	eb cf       	rjmp	.-42     	; 0xb6 <main+0x4>

000000e0 <__muluhisi3>:
  e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <__umulhisi3>
  e4:	a5 9f       	mul	r26, r21
  e6:	90 0d       	add	r25, r0
  e8:	b4 9f       	mul	r27, r20
  ea:	90 0d       	add	r25, r0
  ec:	a4 9f       	mul	r26, r20
  ee:	80 0d       	add	r24, r0
  f0:	91 1d       	adc	r25, r1
  f2:	11 24       	eor	r1, r1
  f4:	08 95       	ret

000000f6 <__umulhisi3>:
  f6:	a2 9f       	mul	r26, r18
  f8:	b0 01       	movw	r22, r0
  fa:	b3 9f       	mul	r27, r19
  fc:	c0 01       	movw	r24, r0
  fe:	a3 9f       	mul	r26, r19
 100:	70 0d       	add	r23, r0
 102:	81 1d       	adc	r24, r1
 104:	11 24       	eor	r1, r1
 106:	91 1d       	adc	r25, r1
 108:	b2 9f       	mul	r27, r18
 10a:	70 0d       	add	r23, r0
 10c:	81 1d       	adc	r24, r1
 10e:	11 24       	eor	r1, r1
 110:	91 1d       	adc	r25, r1
 112:	08 95       	ret

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
